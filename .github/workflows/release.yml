name: Release

on:
  release:
    types:
      - released

env:
  repo_owner: ${{ github.repository_owner }}
  asset_name: rust-hello-world
  image_name: rust-hello-world
  installer_sh_name: installer.sh
  output_name_default: rust-hello-world
  output_name_windows: rust-hello-world.exe
  github_image_name: "ghcr.io/${{ github.repository_owner }}/rust-hello-world"
  docker_image_name: "docker.io/${{ secrets.DOCKERHUB_USERNAME }}/rust-hello-world"
  CRATES_TOKEN: ${{ secrets.CRATES_TOKEN }}

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Run tests
        run: cargo test --all-features

      - name: Build project
        run: cargo build --release

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: "${{ github.event.release.upload_url }}"
          asset_path: "${{ github.workspace }}/target/release/${{ matrix.os == 'windows-latest' && env.output_name_windows || env.output_name_default }}"
          asset_name: "${{ env.asset_name }}-${{ matrix.os }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}"
          asset_content_type: "application/octet-stream"

  publish-installer-sh:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Upload release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: "${{ github.event.release.upload_url }}"
        asset_path: "${{ github.workspace }}/installer.sh"
        asset_name: "${{ env.installer_sh_name }}"
        asset_content_type: "application/octet-stream"

  publish-docker:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and tag Docker image for GitHub Container Registry
        run: |
          docker build -t "${{ env.github_image_name }}:${{ github.event.release.tag_name }}" -t "${{ env.github_image_name }}:latest" .

      - name: Push Docker image to GitHub Container Registry
        run: |
          docker push ${{ env.github_image_name }}:${{ github.event.release.tag_name }}
          docker push ${{ env.github_image_name }}:latest

      - name: Log in to DockerHub Container Registry
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build and tag Docker image for DockerHub Container Registry
        run: |
          docker build -t "${{ env.docker_image_name }}:${{ github.event.release.tag_name }}" -t "${{ env.docker_image_name }}:latest" .

      - name: Push Docker image to GitHub Container Registry
        run: |
          docker push ${{ env.docker_image_name }}:${{ github.event.release.tag_name }}
          docker push ${{ env.docker_image_name }}:latest

  publish-crates:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build project
        run: cargo build --release

      - name: Publish to Crates.io
        run: cargo publish --token ${CRATES_TOKEN}
